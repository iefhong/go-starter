// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PilotLanguage is an object representing the database table.
type PilotLanguage struct {
	PilotID    string    `boil:"pilot_id" json:"pilot_id" toml:"pilot_id" yaml:"pilot_id"`
	LanguageID string    `boil:"language_id" json:"language_id" toml:"language_id" yaml:"language_id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *pilotLanguageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pilotLanguageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PilotLanguageColumns = struct {
	PilotID    string
	LanguageID string
	CreatedAt  string
	UpdatedAt  string
}{
	PilotID:    "pilot_id",
	LanguageID: "language_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// Generated where

var PilotLanguageWhere = struct {
	PilotID    whereHelperstring
	LanguageID whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpernull_Time
}{
	PilotID:    whereHelperstring{field: "\"pilot_languages\".\"pilot_id\""},
	LanguageID: whereHelperstring{field: "\"pilot_languages\".\"language_id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"pilot_languages\".\"created_at\""},
	UpdatedAt:  whereHelpernull_Time{field: "\"pilot_languages\".\"updated_at\""},
}

// PilotLanguageRels is where relationship names are stored.
var PilotLanguageRels = struct {
	Language string
	Pilot    string
}{
	Language: "Language",
	Pilot:    "Pilot",
}

// pilotLanguageR is where relationships are stored.
type pilotLanguageR struct {
	Language *Language
	Pilot    *Pilot
}

// NewStruct creates a new relationship struct
func (*pilotLanguageR) NewStruct() *pilotLanguageR {
	return &pilotLanguageR{}
}

// pilotLanguageL is where Load methods for each relationship are stored.
type pilotLanguageL struct{}

var (
	pilotLanguageAllColumns            = []string{"pilot_id", "language_id", "created_at", "updated_at"}
	pilotLanguageColumnsWithoutDefault = []string{"pilot_id", "language_id", "created_at", "updated_at"}
	pilotLanguageColumnsWithDefault    = []string{}
	pilotLanguagePrimaryKeyColumns     = []string{"pilot_id", "language_id"}
)

type (
	// PilotLanguageSlice is an alias for a slice of pointers to PilotLanguage.
	// This should generally be used opposed to []PilotLanguage.
	PilotLanguageSlice []*PilotLanguage

	pilotLanguageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pilotLanguageType                 = reflect.TypeOf(&PilotLanguage{})
	pilotLanguageMapping              = queries.MakeStructMapping(pilotLanguageType)
	pilotLanguagePrimaryKeyMapping, _ = queries.BindMapping(pilotLanguageType, pilotLanguageMapping, pilotLanguagePrimaryKeyColumns)
	pilotLanguageInsertCacheMut       sync.RWMutex
	pilotLanguageInsertCache          = make(map[string]insertCache)
	pilotLanguageUpdateCacheMut       sync.RWMutex
	pilotLanguageUpdateCache          = make(map[string]updateCache)
	pilotLanguageUpsertCacheMut       sync.RWMutex
	pilotLanguageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single pilotLanguage record from the query, and panics on error.
func (q pilotLanguageQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *PilotLanguage {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single pilotLanguage record from the query.
func (q pilotLanguageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PilotLanguage, error) {
	o := &PilotLanguage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pilot_languages")
	}

	return o, nil
}

// AllP returns all PilotLanguage records from the query, and panics on error.
func (q pilotLanguageQuery) AllP(ctx context.Context, exec boil.ContextExecutor) PilotLanguageSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all PilotLanguage records from the query.
func (q pilotLanguageQuery) All(ctx context.Context, exec boil.ContextExecutor) (PilotLanguageSlice, error) {
	var o []*PilotLanguage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PilotLanguage slice")
	}

	return o, nil
}

// CountP returns the count of all PilotLanguage records in the query, and panics on error.
func (q pilotLanguageQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all PilotLanguage records in the query.
func (q pilotLanguageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pilot_languages rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q pilotLanguageQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q pilotLanguageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pilot_languages exists")
	}

	return count > 0, nil
}

// Language pointed to by the foreign key.
func (o *PilotLanguage) Language(mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	query := Languages(queryMods...)
	queries.SetFrom(query.Query, "\"languages\"")

	return query
}

// Pilot pointed to by the foreign key.
func (o *PilotLanguage) Pilot(mods ...qm.QueryMod) pilotQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PilotID),
	}

	queryMods = append(queryMods, mods...)

	query := Pilots(queryMods...)
	queries.SetFrom(query.Query, "\"pilots\"")

	return query
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pilotLanguageL) LoadLanguage(ctx context.Context, e boil.ContextExecutor, singular bool, maybePilotLanguage interface{}, mods queries.Applicator) error {
	var slice []*PilotLanguage
	var object *PilotLanguage

	if singular {
		object = maybePilotLanguage.(*PilotLanguage)
	} else {
		slice = *maybePilotLanguage.(*[]*PilotLanguage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pilotLanguageR{}
		}
		args = append(args, object.LanguageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pilotLanguageR{}
			}

			for _, a := range args {
				if a == obj.LanguageID {
					continue Outer
				}
			}

			args = append(args, obj.LanguageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`languages`), qm.WhereIn(`languages.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for languages")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Language = foreign
		if foreign.R == nil {
			foreign.R = &languageR{}
		}
		foreign.R.PilotLanguages = append(foreign.R.PilotLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LanguageID == foreign.ID {
				local.R.Language = foreign
				if foreign.R == nil {
					foreign.R = &languageR{}
				}
				foreign.R.PilotLanguages = append(foreign.R.PilotLanguages, local)
				break
			}
		}
	}

	return nil
}

// LoadPilot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pilotLanguageL) LoadPilot(ctx context.Context, e boil.ContextExecutor, singular bool, maybePilotLanguage interface{}, mods queries.Applicator) error {
	var slice []*PilotLanguage
	var object *PilotLanguage

	if singular {
		object = maybePilotLanguage.(*PilotLanguage)
	} else {
		slice = *maybePilotLanguage.(*[]*PilotLanguage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pilotLanguageR{}
		}
		args = append(args, object.PilotID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pilotLanguageR{}
			}

			for _, a := range args {
				if a == obj.PilotID {
					continue Outer
				}
			}

			args = append(args, obj.PilotID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`pilots`), qm.WhereIn(`pilots.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pilot")
	}

	var resultSlice []*Pilot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pilot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pilots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pilots")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pilot = foreign
		if foreign.R == nil {
			foreign.R = &pilotR{}
		}
		foreign.R.PilotLanguages = append(foreign.R.PilotLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PilotID == foreign.ID {
				local.R.Pilot = foreign
				if foreign.R == nil {
					foreign.R = &pilotR{}
				}
				foreign.R.PilotLanguages = append(foreign.R.PilotLanguages, local)
				break
			}
		}
	}

	return nil
}

// SetLanguageP of the pilotLanguage to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.PilotLanguages.
// Panics on error.
func (o *PilotLanguage) SetLanguageP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Language) {
	if err := o.SetLanguage(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLanguage of the pilotLanguage to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.PilotLanguages.
func (o *PilotLanguage) SetLanguage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pilot_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"language_id"}),
		strmangle.WhereClause("\"", "\"", 2, pilotLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PilotID, o.LanguageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LanguageID = related.ID
	if o.R == nil {
		o.R = &pilotLanguageR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			PilotLanguages: PilotLanguageSlice{o},
		}
	} else {
		related.R.PilotLanguages = append(related.R.PilotLanguages, o)
	}

	return nil
}

// SetPilotP of the pilotLanguage to the related item.
// Sets o.R.Pilot to related.
// Adds o to related.R.PilotLanguages.
// Panics on error.
func (o *PilotLanguage) SetPilotP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pilot) {
	if err := o.SetPilot(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPilot of the pilotLanguage to the related item.
// Sets o.R.Pilot to related.
// Adds o to related.R.PilotLanguages.
func (o *PilotLanguage) SetPilot(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pilot) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pilot_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pilot_id"}),
		strmangle.WhereClause("\"", "\"", 2, pilotLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PilotID, o.LanguageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PilotID = related.ID
	if o.R == nil {
		o.R = &pilotLanguageR{
			Pilot: related,
		}
	} else {
		o.R.Pilot = related
	}

	if related.R == nil {
		related.R = &pilotR{
			PilotLanguages: PilotLanguageSlice{o},
		}
	} else {
		related.R.PilotLanguages = append(related.R.PilotLanguages, o)
	}

	return nil
}

// PilotLanguages retrieves all the records using an executor.
func PilotLanguages(mods ...qm.QueryMod) pilotLanguageQuery {
	mods = append(mods, qm.From("\"pilot_languages\""))
	return pilotLanguageQuery{NewQuery(mods...)}
}

// FindPilotLanguageP retrieves a single record by ID with an executor, and panics on error.
func FindPilotLanguageP(ctx context.Context, exec boil.ContextExecutor, pilotID string, languageID string, selectCols ...string) *PilotLanguage {
	retobj, err := FindPilotLanguage(ctx, exec, pilotID, languageID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPilotLanguage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPilotLanguage(ctx context.Context, exec boil.ContextExecutor, pilotID string, languageID string, selectCols ...string) (*PilotLanguage, error) {
	pilotLanguageObj := &PilotLanguage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pilot_languages\" where \"pilot_id\"=$1 AND \"language_id\"=$2", sel,
	)

	q := queries.Raw(query, pilotID, languageID)

	err := q.Bind(ctx, exec, pilotLanguageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pilot_languages")
	}

	return pilotLanguageObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *PilotLanguage) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PilotLanguage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pilot_languages provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(pilotLanguageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pilotLanguageInsertCacheMut.RLock()
	cache, cached := pilotLanguageInsertCache[key]
	pilotLanguageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pilotLanguageAllColumns,
			pilotLanguageColumnsWithDefault,
			pilotLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pilotLanguageType, pilotLanguageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pilotLanguageType, pilotLanguageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pilot_languages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pilot_languages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pilot_languages")
	}

	if !cached {
		pilotLanguageInsertCacheMut.Lock()
		pilotLanguageInsertCache[key] = cache
		pilotLanguageInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the PilotLanguage, and panics on error.
// See Update for more documentation.
func (o *PilotLanguage) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the PilotLanguage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PilotLanguage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	pilotLanguageUpdateCacheMut.RLock()
	cache, cached := pilotLanguageUpdateCache[key]
	pilotLanguageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pilotLanguageAllColumns,
			pilotLanguagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pilot_languages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pilot_languages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pilotLanguagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pilotLanguageType, pilotLanguageMapping, append(wl, pilotLanguagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pilot_languages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pilot_languages")
	}

	if !cached {
		pilotLanguageUpdateCacheMut.Lock()
		pilotLanguageUpdateCache[key] = cache
		pilotLanguageUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q pilotLanguageQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q pilotLanguageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pilot_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pilot_languages")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PilotLanguageSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PilotLanguageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pilotLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pilot_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pilotLanguagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pilotLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pilotLanguage")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *PilotLanguage) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PilotLanguage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pilot_languages provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(pilotLanguageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pilotLanguageUpsertCacheMut.RLock()
	cache, cached := pilotLanguageUpsertCache[key]
	pilotLanguageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pilotLanguageAllColumns,
			pilotLanguageColumnsWithDefault,
			pilotLanguageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pilotLanguageAllColumns,
			pilotLanguagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pilot_languages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pilotLanguagePrimaryKeyColumns))
			copy(conflict, pilotLanguagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pilot_languages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pilotLanguageType, pilotLanguageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pilotLanguageType, pilotLanguageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pilot_languages")
	}

	if !cached {
		pilotLanguageUpsertCacheMut.Lock()
		pilotLanguageUpsertCache[key] = cache
		pilotLanguageUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single PilotLanguage record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *PilotLanguage) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single PilotLanguage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PilotLanguage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PilotLanguage provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pilotLanguagePrimaryKeyMapping)
	sql := "DELETE FROM \"pilot_languages\" WHERE \"pilot_id\"=$1 AND \"language_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pilot_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pilot_languages")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q pilotLanguageQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q pilotLanguageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pilotLanguageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pilot_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pilot_languages")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PilotLanguageSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PilotLanguageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pilotLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pilot_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pilotLanguagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pilotLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pilot_languages")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *PilotLanguage) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PilotLanguage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPilotLanguage(ctx, exec, o.PilotID, o.LanguageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PilotLanguageSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PilotLanguageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PilotLanguageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pilotLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pilot_languages\".* FROM \"pilot_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pilotLanguagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PilotLanguageSlice")
	}

	*o = slice

	return nil
}

// PilotLanguageExistsP checks if the PilotLanguage row exists. Panics on error.
func PilotLanguageExistsP(ctx context.Context, exec boil.ContextExecutor, pilotID string, languageID string) bool {
	e, err := PilotLanguageExists(ctx, exec, pilotID, languageID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PilotLanguageExists checks if the PilotLanguage row exists.
func PilotLanguageExists(ctx context.Context, exec boil.ContextExecutor, pilotID string, languageID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pilot_languages\" where \"pilot_id\"=$1 AND \"language_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pilotID, languageID)
	}
	row := exec.QueryRowContext(ctx, sql, pilotID, languageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pilot_languages exists")
	}

	return exists, nil
}
