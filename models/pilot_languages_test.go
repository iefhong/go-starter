// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPilotLanguages(t *testing.T) {
	t.Parallel()

	query := PilotLanguages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPilotLanguagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PilotLanguages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPilotLanguagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PilotLanguages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PilotLanguages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPilotLanguagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PilotLanguageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PilotLanguages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPilotLanguagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PilotLanguageExists(ctx, tx, o.PilotID, o.LanguageID)
	if err != nil {
		t.Errorf("Unable to check if PilotLanguage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PilotLanguageExists to return true, but got false.")
	}
}

func testPilotLanguagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pilotLanguageFound, err := FindPilotLanguage(ctx, tx, o.PilotID, o.LanguageID)
	if err != nil {
		t.Error(err)
	}

	if pilotLanguageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPilotLanguagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PilotLanguages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPilotLanguagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PilotLanguages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPilotLanguagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pilotLanguageOne := &PilotLanguage{}
	pilotLanguageTwo := &PilotLanguage{}
	if err = randomize.Struct(seed, pilotLanguageOne, pilotLanguageDBTypes, false, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}
	if err = randomize.Struct(seed, pilotLanguageTwo, pilotLanguageDBTypes, false, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pilotLanguageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pilotLanguageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PilotLanguages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPilotLanguagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pilotLanguageOne := &PilotLanguage{}
	pilotLanguageTwo := &PilotLanguage{}
	if err = randomize.Struct(seed, pilotLanguageOne, pilotLanguageDBTypes, false, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}
	if err = randomize.Struct(seed, pilotLanguageTwo, pilotLanguageDBTypes, false, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pilotLanguageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pilotLanguageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PilotLanguages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPilotLanguagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PilotLanguages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPilotLanguagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pilotLanguageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PilotLanguages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPilotLanguageToOneLanguageUsingLanguage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PilotLanguage
	var foreign Language

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pilotLanguageDBTypes, false, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, languageDBTypes, false, languageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Language struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LanguageID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Language().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PilotLanguageSlice{&local}
	if err = local.L.LoadLanguage(ctx, tx, false, (*[]*PilotLanguage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Language == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Language = nil
	if err = local.L.LoadLanguage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Language == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPilotLanguageToOnePilotUsingPilot(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PilotLanguage
	var foreign Pilot

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pilotLanguageDBTypes, false, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pilotDBTypes, false, pilotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pilot struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PilotID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pilot().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PilotLanguageSlice{&local}
	if err = local.L.LoadPilot(ctx, tx, false, (*[]*PilotLanguage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pilot == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pilot = nil
	if err = local.L.LoadPilot(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pilot == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPilotLanguageToOneSetOpLanguageUsingLanguage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PilotLanguage
	var b, c Language

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pilotLanguageDBTypes, false, strmangle.SetComplement(pilotLanguagePrimaryKeyColumns, pilotLanguageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, languageDBTypes, false, strmangle.SetComplement(languagePrimaryKeyColumns, languageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, languageDBTypes, false, strmangle.SetComplement(languagePrimaryKeyColumns, languageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Language{&b, &c} {
		err = a.SetLanguage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Language != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PilotLanguages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LanguageID != x.ID {
			t.Error("foreign key was wrong value", a.LanguageID)
		}

		if exists, err := PilotLanguageExists(ctx, tx, a.PilotID, a.LanguageID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testPilotLanguageToOneSetOpPilotUsingPilot(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PilotLanguage
	var b, c Pilot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pilotLanguageDBTypes, false, strmangle.SetComplement(pilotLanguagePrimaryKeyColumns, pilotLanguageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pilotDBTypes, false, strmangle.SetComplement(pilotPrimaryKeyColumns, pilotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pilotDBTypes, false, strmangle.SetComplement(pilotPrimaryKeyColumns, pilotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Pilot{&b, &c} {
		err = a.SetPilot(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pilot != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PilotLanguages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PilotID != x.ID {
			t.Error("foreign key was wrong value", a.PilotID)
		}

		if exists, err := PilotLanguageExists(ctx, tx, a.PilotID, a.LanguageID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testPilotLanguagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPilotLanguagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PilotLanguageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPilotLanguagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PilotLanguages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pilotLanguageDBTypes = map[string]string{`PilotID`: `uuid`, `LanguageID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                    = bytes.MinRead
)

func testPilotLanguagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pilotLanguagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pilotLanguageAllColumns) == len(pilotLanguagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PilotLanguages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPilotLanguagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pilotLanguageAllColumns) == len(pilotLanguagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PilotLanguage{}
	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PilotLanguages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pilotLanguageDBTypes, true, pilotLanguagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pilotLanguageAllColumns, pilotLanguagePrimaryKeyColumns) {
		fields = pilotLanguageAllColumns
	} else {
		fields = strmangle.SetComplement(
			pilotLanguageAllColumns,
			pilotLanguagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PilotLanguageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPilotLanguagesUpsert(t *testing.T) {
	t.Parallel()

	if len(pilotLanguageAllColumns) == len(pilotLanguagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PilotLanguage{}
	if err = randomize.Struct(seed, &o, pilotLanguageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PilotLanguage: %s", err)
	}

	count, err := PilotLanguages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pilotLanguageDBTypes, false, pilotLanguagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PilotLanguage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PilotLanguage: %s", err)
	}

	count, err = PilotLanguages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
